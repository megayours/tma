/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PrivateIndexRouteImport } from './routes/private/index'
import { Route as PostIndexRouteImport } from './routes/post/index'
import { Route as PostPostIdIndexRouteImport } from './routes/post/$postId/index'
import { Route as AuthDiscordV1CallbackIndexRouteImport } from './routes/auth/discord/v1/callback/index'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateIndexRoute = PrivateIndexRouteImport.update({
  id: '/private/',
  path: '/private/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostIndexRoute = PostIndexRouteImport.update({
  id: '/post/',
  path: '/post/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostPostIdIndexRoute = PostPostIdIndexRouteImport.update({
  id: '/post/$postId/',
  path: '/post/$postId/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthDiscordV1CallbackIndexRoute =
  AuthDiscordV1CallbackIndexRouteImport.update({
    id: '/auth/discord/v1/callback/',
    path: '/auth/discord/v1/callback/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/post': typeof PostIndexRoute
  '/private': typeof PrivateIndexRoute
  '/post/$postId': typeof PostPostIdIndexRoute
  '/auth/discord/v1/callback': typeof AuthDiscordV1CallbackIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/post': typeof PostIndexRoute
  '/private': typeof PrivateIndexRoute
  '/post/$postId': typeof PostPostIdIndexRoute
  '/auth/discord/v1/callback': typeof AuthDiscordV1CallbackIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/post/': typeof PostIndexRoute
  '/private/': typeof PrivateIndexRoute
  '/post/$postId/': typeof PostPostIdIndexRoute
  '/auth/discord/v1/callback/': typeof AuthDiscordV1CallbackIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/post'
    | '/private'
    | '/post/$postId'
    | '/auth/discord/v1/callback'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/post'
    | '/private'
    | '/post/$postId'
    | '/auth/discord/v1/callback'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/post/'
    | '/private/'
    | '/post/$postId/'
    | '/auth/discord/v1/callback/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  PostIndexRoute: typeof PostIndexRoute
  PrivateIndexRoute: typeof PrivateIndexRoute
  PostPostIdIndexRoute: typeof PostPostIdIndexRoute
  AuthDiscordV1CallbackIndexRoute: typeof AuthDiscordV1CallbackIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/private/': {
      id: '/private/'
      path: '/private'
      fullPath: '/private'
      preLoaderRoute: typeof PrivateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/post/': {
      id: '/post/'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/post/$postId/': {
      id: '/post/$postId/'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/discord/v1/callback/': {
      id: '/auth/discord/v1/callback/'
      path: '/auth/discord/v1/callback'
      fullPath: '/auth/discord/v1/callback'
      preLoaderRoute: typeof AuthDiscordV1CallbackIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  PostIndexRoute: PostIndexRoute,
  PrivateIndexRoute: PrivateIndexRoute,
  PostPostIdIndexRoute: PostPostIdIndexRoute,
  AuthDiscordV1CallbackIndexRoute: AuthDiscordV1CallbackIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
